{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOV4+DOovZkFosvR1nCl+PA",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ravipatel0052/Desing_of_Data_Structures/blob/main/Module2%5CLesson13\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "o0cqsnX9aMo8"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Queues: Definition**"
      ],
      "metadata": {
        "id": "BgHGRZMta1g7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "A Queue is a linear data structure that follows the FIFO (First In First Out) principle.\n",
        "\n",
        "Think of a line at a ticket counter: the person who joins first gets served first.\n",
        "\n",
        "In programming, a queue is a collection where insertions are made at one end (rear) and deletions are made at the other end (front).\n",
        "\n",
        "ðŸ”¹ Real-World Applications\n",
        "CPU task scheduling\n",
        "\n",
        "Print queues\n",
        "\n",
        "Call center systems\n",
        "\n",
        "Breadth-First Search (BFS) in graphs"
      ],
      "metadata": {
        "id": "823zfpBZbHZ7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Array  Representation of Queue**"
      ],
      "metadata": {
        "id": "dPbwYNW8bNcI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Concepts\n",
        "In this implementation:\n",
        "\n",
        "The queue is maintained in a fixed-size array.\n",
        "\n",
        "Two pointers:\n",
        "\n",
        "front: Index of the front element (to be dequeued)\n",
        "\n",
        "rear: Index of the last inserted element"
      ],
      "metadata": {
        "id": "5NcEwdC0bd1S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "int queue[MAX];\n",
        "int front = -1, rear = -1;\n"
      ],
      "metadata": {
        "id": "JJ6p0qjtbrUF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "vSq72RuRbkN4"
      }
    }
  ]
}